server:
  port: 8000

# Eureka Service Discovery 에 Client 로 등록하기 위한 설정 추가
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  cloud:
    #Gateway 설정
    gateway:
      #라우팅 정보 등록
      routes:
        #user-service
#        - id: user-service
#          uri: lb://USER-SERVICE  #eureka 에 등록한 서비스 이름
#          predicates:
#            - Path=/user-service/**  #"/user-service" 로 들어오는 모든 요청을 USER-SERVICE 로 포워딩
        #인증처리 기능 추가에 따른 user-service routes 정보 변경
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login  #"/login"은 SpringSecurity에서 제공해주는 API임
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie  #POST로 전달되는 데이터를 매번 새롭게 인식하기 위해  RequestHeader를 초기화
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}  #클라이언트에서 들어온 경로를 변경하여 라우트
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            #POST로 요청되는 /user-service/users API
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie  #POST로 전달되는 데이터를 매번 새롭게 인식하기 위해  RequestHeader를 초기화
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}  #클라이언트에서 들어온 경로를 변경하여 라우트
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            #GET으로 요청되는 "/user-service/"로 시작하는 API
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie  #POST로 전달되는 데이터를 매번 새롭게 인식하기 위해  RequestHeader를 초기화
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}  #클라이언트에서 들어온 경로를 변경하여 라우트
            - AuthorizationHeaderFilter  #인가를 위해 생성한 Filter 추가
        #GET, POST로 요청되는 '/user-service/actuator/**' 요청에 대해 '/actuator/**' 로 포워딩
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**  #"/catalog-service" 로 들어오는 모든 요청을 CATALOG-SERVICE 로 포워딩
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**  #"/order-service" 로 들어오는 모든 요청을 ORDER-SERVICE 로 포워딩
      #GlobalFilter 설정
      default-filters:
        - name: GlobalFilter

# token 정보 -> configuration server에서 읽어오도록 변경
#token:
#  secret: user_token  #private key

# Actuator 에서 사용할 end point 구성
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace  # httptrace를 사용하기 위해 Application 클래스에 Bean을 등록