server:
  port: 0  #random port 사용을 위해 0으로 설정

spring:
  application:
    name: user-service  #애플리케이션 name 설정
  #h2 Database 설정 추가
  h2:
    console:
      enabled: true  #h2 Console 사용
      settings:
        web-allow-others: true  #외부에서 접속을 허용하도록 설정
      path: /h2-console  #웹 브라우져에서 콘솔에 접속하기 위한 주소. path 작성하지 않은 경우 디폴트로 /h2-console 로 접속가능

  #암호화 처리후 Config Server에 저장
#  datasource:
#    driver-class-name: org.h2.Driver
#    url: jdbc:h2:mem:testdb  # database url 고정
#    username: sa
#    password: 1234

  # Rabbit MQ 접속정보 추가
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

eureka:
  instance:
    #Eureka Dashboard 에 출력할 instance id 설정. random port를 display
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
    #spring.cloud.client.hostname 를 사용하면 ip 주소가 보여진다
    #instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true  #Eureka의 registry에 등록하도록 true 지정
    fetch-registry: true  #Eureka 서버로 부터 인스턴스들의 정보를 주기적으로 가져오도록 true 지정
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka  #Eureka Server 에 등록하기 위한 endpoint 지정

#환경변수를 자바코드에서 사용해보기 위해 임의의 설정정보 작성
greeting:
  message: Welcome to the user-service.

#로그레벨 설정
logging:
  level:
    com.example.userservice: DEBUG
    com.example.userservice.client: DEBUG  # Feign Client 로그 출력을 위한 로그레벨 설정

#token 설정 -> Spring Cloud Config 서버에서 관리
#token:
  #expiration_time: 86400000  #토큰 만료 시간. 60*60*24*1000 = 86400000 밀리세컨드 = 하루
  #secret: user_token #token 생성시 조합되는 문자

#Actuator 설정 추가
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, busrefresh  # refresh: config server에서 가져와야할 config 정보를 refresh